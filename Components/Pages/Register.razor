@page "/register"
@using EncryptedFileApp.Data
@using EncryptedFileApp.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger
@inject IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServer

<link href="css/register.css" rel="stylesheet" />

<div class="container">
    <h3>Opret konto</h3>

    <div>
        <label>Brugernavn:</label>
        <input @bind="Brugernavn" placeholder="Indtast brugernavn" maxlength="50" />
    </div>

    <div>
        <label>Kodeord:</label>
        <input @bind="Kodeord" type="password" placeholder="Indtast kodeord" @oninput="EvaluatePasswordStrength" />
        <div style="margin-top: 5px;">
            <small>Password styrke: <span style="color:@PasswordStrengthColor">@PasswordStrengthText</span></small>
        </div>
    </div>

    <div>
        <label>Bekræft kodeord:</label>
        <input @bind="BekræftKodeord" type="password" placeholder="Gentag kodeord" />
    </div>

    <div class="buttons" style="margin-top: 10px;">
        <button @onclick="OpretKonto" disabled="@IsRateLimited">Opret konto</button>
        <button @onclick="@(() => NavigationManager.NavigateTo("/"))">Allerede bruger? Login</button>
    </div>

    @if (IsRateLimited)
    {
        <p style="color:red">For mange forsøg. Prøv igen om @RetryAfterSeconds sekunder.</p>
    }
    else if (!string.IsNullOrEmpty(Fejlbesked))
    {
        <p style="color:red">@Fejlbesked</p>
    }
</div>

@code {
    private string Brugernavn = "";
    private string Kodeord = "";
    private string BekræftKodeord = "";
    private string Fejlbesked = "";

    private const int MaxAttempts = 5;
    private static readonly TimeSpan TimeWindow = TimeSpan.FromMinutes(10);

    private bool IsRateLimited = false;
    private int RetryAfterSeconds = 0;

    // Password styrke UI
    private string PasswordStrengthText = "Ingen";
    private string PasswordStrengthColor = "gray";

    private async Task OpretKonto()
    {
        Fejlbesked = "";
        var ip = GetClientIp();

        // Rate limiting i DB
        var now = DateTime.UtcNow;
        var windowStart = now - TimeWindow;

        var recentAttempts = await Db.RegistrationAttempts
            .Where(a => a.Ip == ip && a.AttemptTime >= windowStart)
            .OrderBy(a => a.AttemptTime)
            .ToListAsync();

        if (recentAttempts.Count >= MaxAttempts)
        {
            IsRateLimited = true;

            var oldestAttempt = recentAttempts.First();
            RetryAfterSeconds = (int)(TimeWindow - (now - oldestAttempt.AttemptTime)).TotalSeconds;
            Fejlbesked = $"For mange forsøg. Prøv igen om {RetryAfterSeconds} sekunder.";
            Logger.LogWarning("Rate limited registration attempt from IP {IP}", ip);

            // Log rate-limited forsøg (usuccessful)
            await LogAttempt(ip, false, Brugernavn);
            return;
        }
        else
        {
            IsRateLimited = false;
            RetryAfterSeconds = 0;
        }

        // Lokal validering før DB-kald
        if (string.IsNullOrWhiteSpace(Brugernavn) || string.IsNullOrWhiteSpace(Kodeord))
        {
            Fejlbesked = "Brugernavn og kodeord skal udfyldes.";
            await DelayOnFail();
            await LogAttempt(ip, false, Brugernavn);
            return;
        }

        if (Brugernavn.Length < 3 || Brugernavn.Length > 50)
        {
            Fejlbesked = "Brugernavn skal være mellem 3 og 50 tegn.";
            await DelayOnFail();
            await LogAttempt(ip, false, Brugernavn);
            return;
        }

        if (!System.Text.RegularExpressions.Regex.IsMatch(Brugernavn, @"^[a-zA-Z0-9]+$"))
        {
            Fejlbesked = "Brugernavn må kun indeholde bogstaver og tal.";
            await DelayOnFail();
            await LogAttempt(ip, false, Brugernavn);
            return;
        }

        if (Kodeord != BekræftKodeord)
        {
            Fejlbesked = "Kodeordene matcher ikke.";
            await DelayOnFail();
            await LogAttempt(ip, false, Brugernavn);
            return;
        }

        if (!StrongPassword(Kodeord))
        {
            Fejlbesked = "Kodeord skal være mindst 8 tegn, indeholde store, små bogstaver, tal og specialtegn.";
            await DelayOnFail();
            await LogAttempt(ip, false, Brugernavn);
            return;
        }

        try
        {
            var eksisterende = await Db.Brugere.FirstOrDefaultAsync(b => b.Brugernavn == Brugernavn);
            if (eksisterende != null)
            {
                Fejlbesked = "Brugernavn er allerede i brug.";
                await DelayOnFail();
                await LogAttempt(ip, false, Brugernavn);
                return;
            }

            var hasher = new PasswordHasher<Bruger>();
            var bruger = new Bruger { Brugernavn = Brugernavn };
            bruger.Kodeord = hasher.HashPassword(bruger, Kodeord);

            Db.Brugere.Add(bruger);
            await Db.SaveChangesAsync();

            Logger.LogInformation("Ny bruger registreret: {Brugernavn} fra IP {IP}", Brugernavn, ip);

            await LogAttempt(ip, true, Brugernavn);

            // Redirect
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fejl ved registrering af bruger {Brugernavn}", Brugernavn);
            Fejlbesked = "Der opstod en fejl, prøv venligst igen senere.";
            await DelayOnFail();
            await LogAttempt(ip, false, Brugernavn);
        }
    }

    private async Task DelayOnFail()
    {
        // Tilføj en lille tilfældig forsinkelse på 500-1500ms ved fejlede forsøg for at forhindre brute force
        var random = new Random();
        await Task.Delay(random.Next(500, 1500));
    }

    private bool StrongPassword(string password)
    {
        if (password.Length < 8) return false;
        if (!password.Any(char.IsUpper)) return false;
        if (!password.Any(char.IsLower)) return false;
        if (!password.Any(char.IsDigit)) return false;
        if (!password.Any(ch => !char.IsLetterOrDigit(ch))) return false; // krav om specialtegn
        return true;
    }

    private void EvaluatePasswordStrength(ChangeEventArgs e)
    {
        if (e.Value is not string pwd)
        {
            PasswordStrengthText = "Ingen";
            PasswordStrengthColor = "gray";
            return;
        }

        int score = 0;
        if (pwd.Length >= 8) score++;
        if (pwd.Any(char.IsLower)) score++;
        if (pwd.Any(char.IsUpper)) score++;
        if (pwd.Any(char.IsDigit)) score++;
        if (pwd.Any(ch => !char.IsLetterOrDigit(ch))) score++;

        switch (score)
        {
            case 5:
                PasswordStrengthText = "Meget stærk";
                PasswordStrengthColor = "green";
                break;
            case 4:
                PasswordStrengthText = "Stærk";
                PasswordStrengthColor = "limegreen";
                break;
            case 3:
                PasswordStrengthText = "Medium";
                PasswordStrengthColor = "orange";
                break;
            case 2:
                PasswordStrengthText = "Svag";
                PasswordStrengthColor = "orangered";
                break;
            default:
                PasswordStrengthText = "Meget svag";
                PasswordStrengthColor = "red";
                break;
        }
    }

    private string GetClientIp()
    {
        var context = HttpContextAccessor.HttpContext;
        if (context == null)
            return "unknown";

        var forwardedFor = context.Request.Headers["X-Forwarded-For"].FirstOrDefault();
        if (!string.IsNullOrEmpty(forwardedFor))
        {
            var ip = forwardedFor.Split(',').FirstOrDefault()?.Trim();
            if (!string.IsNullOrEmpty(ip))
                return ip;
        }

        return context.Connection.RemoteIpAddress?.ToString() ?? "unknown";
    }

    private async Task LogAttempt(string ip, bool success, string brugernavn)
    {
        try
        {
            var attempt = new RegistrationAttempt
                {
                    Ip = ip,
                    AttemptTime = DateTime.UtcNow,
                    Success = success,
                    UserName = brugernavn 
                };
            Db.RegistrationAttempts.Add(attempt);
            await Db.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Kunne ikke logge registreringsforsøg.");
        }
    }

}
